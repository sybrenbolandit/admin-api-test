plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
}

apply plugin:"application"

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.1'
    }
}

dependencies {
    compile project(":persistence")

    annotationProcessor "io.micronaut:micronaut-inject-java"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-runtime"
    compile "javax.annotation:javax.annotation-api"
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest "io.micronaut:micronaut-inject-java"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4.1"

    testCompile "org.jetbrains.spek:spek-api:$spekVersion"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testCompile "junit:junit:4.12"
    testCompile "io.micronaut:micronaut-inject-java"

    testRuntime "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1"

}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "nl.sybrenbolandit.webapp.Application"

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean